// Generated by CoffeeScript 1.6.3
var allKey, compare, errorJS, etalonJS, poster, testJS, zKey;

etalonJS = null;

testJS = null;

errorJS = null;

poster = function(url, type, returned, data, func) {
  if (type === 'GET') {
    url = url + "?" + Math.random();
  }
  if (!returned) {
    returned = 'html';
  }
  return $.ajax(url, {
    type: type,
    data: data,
    dataType: returned,
    success: function(res, status, xhr) {
      if (func != null) {
        return func(res);
      }
    },
    error: function(xhr, status, err) {}
  });
};

zKey = function(object) {
  var check, i, k, l, p, result, t, v, _i, _j, _k, _ref, _ref1, _ref2;
  result = null;
  if ((!_.isArray(object)) && (!_.isObject(object))) {
    return object;
  }
  if (_.isArray(object)) {
    for (i = _i = 0, _ref = object.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      object[i] = zKey(object[i]);
    }
    result = [];
    for (k = _j = 0, _ref1 = object.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; k = 0 <= _ref1 ? ++_j : --_j) {
      if (k > 0) {
        check = false;
        for (i = _k = 0; 0 <= k ? _k < k : _k > k; i = 0 <= k ? ++_k : --_k) {
          if (_.isEqual(object[k], object[i])) {
            check = true;
            break;
          }
        }
        if (!check) {
          _ref2 = object[k];
          for (l in _ref2) {
            p = _ref2[l];
            if (_.isArray(p)) {
              p = zKey(p);
              break;
            }
            if (p !== object[k - 1][l]) {
              t = [];
              t.push(object[k - 1][l]);
              t.push(p);
              object[k - 1][l] = t;
            }
          }
          result.push(object[k]);
          break;
        }
      } else {
        result.push(object[k]);
      }
    }
    result = result.splice(0, 1);
  } else {
    for (k in object) {
      v = object[k];
      object[k] = zKey(object[k]);
    }
    result = object;
  }
  return result;
};

allKey = function(object) {
  var alreadyPresentInArray, k, l, result, subObject, v, _i;
  result = null;
  if (_.isArray(object)) {
    if (object.length === 0) {
      return "[]";
    }
    result = [];
    for (k in object) {
      v = object[k];
      if ((_.isObject(v)) && (!v.length) && (v !== null)) {
        subObject = allKey(v);
        if (k > 0 && result[k - 1]) {
          alreadyPresentInArray = false;
          l = 0;
          for (l = _i = 0; 0 <= k ? _i < k : _i > k; l = 0 <= k ? ++_i : --_i) {
            if (_.isEqual(result[l], subObject)) {
              alreadyPresentInArray = true;
              break;
            }
          }
          if (!alreadyPresentInArray) {
            result[k] = subObject;
          }
        } else {
          result[k] = subObject;
        }
      } else {
        result.push(typeof v);
      }
    }
    result = _.uniq(result);
  }
  if ((_.isObject(object)) && (!object.length)) {
    result = {};
    for (k in object) {
      v = object[k];
      if (_.isObject(v || _.isArray(v))) {
        subObject = allKey(v);
        result[k] = subObject;
      } else {
        if (v != null) {
          result[k] = typeof v;
        } else {
          result[k] = "null";
        }
      }
    }
  }
  return result;
};

compare = function(object, etalon, result) {
  var i, k, s, tempo_result, v, _ref;
  for (k in object) {
    v = object[k];
    if (_.isArray(etalon[k])) {
      _ref = etalon[k];
      for (s in _ref) {
        i = _ref[s];
        if (_.isObject(i)) {
          i = compare(i, etalon[k][0], result);
          break;
        }
        if (etalon[k].indexOf(i) < 0) {
          object[k][s] = '<strong>' + i + '</strong>';
          result.push(k + ':' + i);
        }
      }
    } else {
      if (_.isObject(etalon[k])) {
        tempo_result = compare(v, etalon[k], result);
        if (tempo_result.length > 0) {
          result.push(tempo_result);
        }
      } else {
        if (v !== etalon[k]) {
          object[k] = '<strong>' + v + '</strong>';
          if (_.isArray(v)) {
            v = _.uniq(v);
            result.push(k + ': Array of [' + v[0] + ']');
          } else {
            result.push(k + ':' + v);
          }
        }
      }
    }
  }
  return object;
};

jQuery(function() {
  poster('/source.json', 'GET', 'json', {}, function(data) {
    etalonJS = zKey(allKey(data));
    return $("#etalon").html(JSON.stringify(etalonJS));
  });
  $("#checkgood").on({
    click: function() {
      return poster('/goodcheck.json', 'GET', 'json', {}, function(data) {
        var result;
        testJS = zKey(allKey(data));
        $("#forcheck").html(JSON.stringify(testJS));
        result = [];
        $("#result").html(JSON.stringify(compare(testJS, etalonJS, result)));
        return console.log(result);
      });
    }
  });
  return $("#checkbad").on({
    click: function() {
      return poster('/badcheck.json', 'GET', 'json', {}, function(data) {
        var result;
        testJS = zKey(allKey(data));
        $("#forcheck").html(JSON.stringify(testJS));
        result = [];
        $("#result").html(JSON.stringify(compare(testJS, etalonJS, result)));
        return console.log(result);
      });
    }
  });
});

/*
Если у нас массив из объектов, то во внимание берётся только первый объект, не сравниваются все остальные (ну или последний)
*/

